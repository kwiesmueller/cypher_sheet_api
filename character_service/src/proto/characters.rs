// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `characters.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct CreateCharacter {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateCharacter {
    fn default() -> &'a CreateCharacter {
        <CreateCharacter as ::protobuf::Message>::default_instance()
    }
}

impl CreateCharacter {
    pub fn new() -> CreateCharacter {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateCharacter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateCharacter {
        CreateCharacter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateCharacter>(
                "CreateCharacter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateCharacter {
        static instance: ::protobuf::rt::LazyV2<CreateCharacter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateCharacter::new)
    }
}

impl ::protobuf::Clear for CreateCharacter {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateCharacter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateCharacter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CharacterCreated {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CharacterCreated {
    fn default() -> &'a CharacterCreated {
        <CharacterCreated as ::protobuf::Message>::default_instance()
    }
}

impl CharacterCreated {
    pub fn new() -> CharacterCreated {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CharacterCreated {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CharacterCreated {
        CharacterCreated::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &CharacterCreated| { &m.uuid },
                |m: &mut CharacterCreated| { &mut m.uuid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CharacterCreated>(
                "CharacterCreated",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CharacterCreated {
        static instance: ::protobuf::rt::LazyV2<CharacterCreated> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CharacterCreated::new)
    }
}

impl ::protobuf::Clear for CharacterCreated {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CharacterCreated {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CharacterCreated {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRevision {
    // message fields
    pub uuid: ::std::string::String,
    pub character: ::protobuf::SingularPtrField<super::character::Character>,
    pub revision: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRevision {
    fn default() -> &'a WriteRevision {
        <WriteRevision as ::protobuf::Message>::default_instance()
    }
}

impl WriteRevision {
    pub fn new() -> WriteRevision {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // .character.Character character = 2;


    pub fn get_character(&self) -> &super::character::Character {
        self.character.as_ref().unwrap_or_else(|| <super::character::Character as ::protobuf::Message>::default_instance())
    }
    pub fn clear_character(&mut self) {
        self.character.clear();
    }

    pub fn has_character(&self) -> bool {
        self.character.is_some()
    }

    // Param is passed by value, moved
    pub fn set_character(&mut self, v: super::character::Character) {
        self.character = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_character(&mut self) -> &mut super::character::Character {
        if self.character.is_none() {
            self.character.set_default();
        }
        self.character.as_mut().unwrap()
    }

    // Take field
    pub fn take_character(&mut self) -> super::character::Character {
        self.character.take().unwrap_or_else(|| super::character::Character::new())
    }

    // uint64 revision = 3;


    pub fn get_revision(&self) -> u64 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u64) {
        self.revision = v;
    }
}

impl ::protobuf::Message for WriteRevision {
    fn is_initialized(&self) -> bool {
        for v in &self.character {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.character)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if let Some(ref v) = self.character.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(3, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if let Some(ref v) = self.character.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.revision != 0 {
            os.write_uint64(3, self.revision)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRevision {
        WriteRevision::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &WriteRevision| { &m.uuid },
                |m: &mut WriteRevision| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::character::Character>>(
                "character",
                |m: &WriteRevision| { &m.character },
                |m: &mut WriteRevision| { &mut m.character },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision",
                |m: &WriteRevision| { &m.revision },
                |m: &mut WriteRevision| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteRevision>(
                "WriteRevision",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteRevision {
        static instance: ::protobuf::rt::LazyV2<WriteRevision> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteRevision::new)
    }
}

impl ::protobuf::Clear for WriteRevision {
    fn clear(&mut self) {
        self.uuid.clear();
        self.character.clear();
        self.revision = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRevision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRevision {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevisionWritten {
    // message fields
    pub uuid: ::std::string::String,
    pub revision: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevisionWritten {
    fn default() -> &'a RevisionWritten {
        <RevisionWritten as ::protobuf::Message>::default_instance()
    }
}

impl RevisionWritten {
    pub fn new() -> RevisionWritten {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // uint64 revision = 2;


    pub fn get_revision(&self) -> u64 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u64) {
        self.revision = v;
    }
}

impl ::protobuf::Message for RevisionWritten {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if self.revision != 0 {
            os.write_uint64(2, self.revision)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevisionWritten {
        RevisionWritten::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &RevisionWritten| { &m.uuid },
                |m: &mut RevisionWritten| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision",
                |m: &RevisionWritten| { &m.revision },
                |m: &mut RevisionWritten| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevisionWritten>(
                "RevisionWritten",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevisionWritten {
        static instance: ::protobuf::rt::LazyV2<RevisionWritten> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevisionWritten::new)
    }
}

impl ::protobuf::Clear for RevisionWritten {
    fn clear(&mut self) {
        self.uuid.clear();
        self.revision = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevisionWritten {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevisionWritten {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRevision {
    // message fields
    pub uuid: ::std::string::String,
    pub revision: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRevision {
    fn default() -> &'a ReadRevision {
        <ReadRevision as ::protobuf::Message>::default_instance()
    }
}

impl ReadRevision {
    pub fn new() -> ReadRevision {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // uint64 revision = 2;


    pub fn get_revision(&self) -> u64 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u64) {
        self.revision = v;
    }
}

impl ::protobuf::Message for ReadRevision {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if self.revision != 0 {
            os.write_uint64(2, self.revision)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRevision {
        ReadRevision::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &ReadRevision| { &m.uuid },
                |m: &mut ReadRevision| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision",
                |m: &ReadRevision| { &m.revision },
                |m: &mut ReadRevision| { &mut m.revision },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRevision>(
                "ReadRevision",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRevision {
        static instance: ::protobuf::rt::LazyV2<ReadRevision> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRevision::new)
    }
}

impl ::protobuf::Clear for ReadRevision {
    fn clear(&mut self) {
        self.uuid.clear();
        self.revision = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRevision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRevision {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevisionRead {
    // message fields
    pub uuid: ::std::string::String,
    pub revision: u64,
    pub character: ::protobuf::SingularPtrField<super::character::Character>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevisionRead {
    fn default() -> &'a RevisionRead {
        <RevisionRead as ::protobuf::Message>::default_instance()
    }
}

impl RevisionRead {
    pub fn new() -> RevisionRead {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // uint64 revision = 2;


    pub fn get_revision(&self) -> u64 {
        self.revision
    }
    pub fn clear_revision(&mut self) {
        self.revision = 0;
    }

    // Param is passed by value, moved
    pub fn set_revision(&mut self, v: u64) {
        self.revision = v;
    }

    // .character.Character character = 3;


    pub fn get_character(&self) -> &super::character::Character {
        self.character.as_ref().unwrap_or_else(|| <super::character::Character as ::protobuf::Message>::default_instance())
    }
    pub fn clear_character(&mut self) {
        self.character.clear();
    }

    pub fn has_character(&self) -> bool {
        self.character.is_some()
    }

    // Param is passed by value, moved
    pub fn set_character(&mut self, v: super::character::Character) {
        self.character = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_character(&mut self) -> &mut super::character::Character {
        if self.character.is_none() {
            self.character.set_default();
        }
        self.character.as_mut().unwrap()
    }

    // Take field
    pub fn take_character(&mut self) -> super::character::Character {
        self.character.take().unwrap_or_else(|| super::character::Character::new())
    }
}

impl ::protobuf::Message for RevisionRead {
    fn is_initialized(&self) -> bool {
        for v in &self.character {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.revision = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.character)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if self.revision != 0 {
            my_size += ::protobuf::rt::value_size(2, self.revision, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.character.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if self.revision != 0 {
            os.write_uint64(2, self.revision)?;
        }
        if let Some(ref v) = self.character.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevisionRead {
        RevisionRead::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &RevisionRead| { &m.uuid },
                |m: &mut RevisionRead| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "revision",
                |m: &RevisionRead| { &m.revision },
                |m: &mut RevisionRead| { &mut m.revision },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::character::Character>>(
                "character",
                |m: &RevisionRead| { &m.character },
                |m: &mut RevisionRead| { &mut m.character },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevisionRead>(
                "RevisionRead",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevisionRead {
        static instance: ::protobuf::rt::LazyV2<RevisionRead> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevisionRead::new)
    }
}

impl ::protobuf::Clear for RevisionRead {
    fn clear(&mut self) {
        self.uuid.clear();
        self.revision = 0;
        self.character.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevisionRead {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevisionRead {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadLatestRevision {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadLatestRevision {
    fn default() -> &'a ReadLatestRevision {
        <ReadLatestRevision as ::protobuf::Message>::default_instance()
    }
}

impl ReadLatestRevision {
    pub fn new() -> ReadLatestRevision {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReadLatestRevision {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadLatestRevision {
        ReadLatestRevision::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &ReadLatestRevision| { &m.uuid },
                |m: &mut ReadLatestRevision| { &mut m.uuid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadLatestRevision>(
                "ReadLatestRevision",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadLatestRevision {
        static instance: ::protobuf::rt::LazyV2<ReadLatestRevision> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadLatestRevision::new)
    }
}

impl ::protobuf::Clear for ReadLatestRevision {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadLatestRevision {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadLatestRevision {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteCharacter {
    // message fields
    pub uuid: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteCharacter {
    fn default() -> &'a DeleteCharacter {
        <DeleteCharacter as ::protobuf::Message>::default_instance()
    }
}

impl DeleteCharacter {
    pub fn new() -> DeleteCharacter {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeleteCharacter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteCharacter {
        DeleteCharacter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &DeleteCharacter| { &m.uuid },
                |m: &mut DeleteCharacter| { &mut m.uuid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteCharacter>(
                "DeleteCharacter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteCharacter {
        static instance: ::protobuf::rt::LazyV2<DeleteCharacter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteCharacter::new)
    }
}

impl ::protobuf::Clear for DeleteCharacter {
    fn clear(&mut self) {
        self.uuid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteCharacter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteCharacter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CharacterDeleted {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CharacterDeleted {
    fn default() -> &'a CharacterDeleted {
        <CharacterDeleted as ::protobuf::Message>::default_instance()
    }
}

impl CharacterDeleted {
    pub fn new() -> CharacterDeleted {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CharacterDeleted {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CharacterDeleted {
        CharacterDeleted::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CharacterDeleted>(
                "CharacterDeleted",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CharacterDeleted {
        static instance: ::protobuf::rt::LazyV2<CharacterDeleted> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CharacterDeleted::new)
    }
}

impl ::protobuf::Clear for CharacterDeleted {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CharacterDeleted {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CharacterDeleted {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10characters.proto\x12\ncharacters\x1a\x0fcharacter.proto\"\x11\n\
    \x0fCreateCharacter\"&\n\x10CharacterCreated\x12\x12\n\x04uuid\x18\x01\
    \x20\x01(\tR\x04uuid\"s\n\rWriteRevision\x12\x12\n\x04uuid\x18\x01\x20\
    \x01(\tR\x04uuid\x122\n\tcharacter\x18\x02\x20\x01(\x0b2\x14.character.C\
    haracterR\tcharacter\x12\x1a\n\x08revision\x18\x03\x20\x01(\x04R\x08revi\
    sion\"A\n\x0fRevisionWritten\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uu\
    id\x12\x1a\n\x08revision\x18\x02\x20\x01(\x04R\x08revision\">\n\x0cReadR\
    evision\x12\x12\n\x04uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x1a\n\x08revis\
    ion\x18\x02\x20\x01(\x04R\x08revision\"r\n\x0cRevisionRead\x12\x12\n\x04\
    uuid\x18\x01\x20\x01(\tR\x04uuid\x12\x1a\n\x08revision\x18\x02\x20\x01(\
    \x04R\x08revision\x122\n\tcharacter\x18\x03\x20\x01(\x0b2\x14.character.\
    CharacterR\tcharacter\"(\n\x12ReadLatestRevision\x12\x12\n\x04uuid\x18\
    \x01\x20\x01(\tR\x04uuid\"%\n\x0fDeleteCharacter\x12\x12\n\x04uuid\x18\
    \x01\x20\x01(\tR\x04uuid\"\x12\n\x10CharacterDeleted2\x8e\x03\n\nCharact\
    ers\x12C\n\x06Create\x12\x1b.characters.CreateCharacter\x1a\x1c.characte\
    rs.CharacterCreated\x12P\n\x16WriteCharacterRevision\x12\x19.characters.\
    WriteRevision\x1a\x1b.characters.RevisionWritten\x12K\n\x15ReadCharacter\
    Revision\x12\x18.characters.ReadRevision\x1a\x18.characters.RevisionRead\
    \x12W\n\x1bReadLatestCharacterRevision\x12\x1e.characters.ReadLatestRevi\
    sion\x1a\x18.characters.RevisionRead\x12C\n\x06Delete\x12\x1b.characters\
    .DeleteCharacter\x1a\x1c.characters.CharacterDeletedJ\xf0\t\n\x06\x12\
    \x04\0\0,\x1b\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x13\n\t\n\x02\x03\0\x12\x03\x04\0\x19\n\n\n\x02\x06\0\x12\x04\x06\
    \0\x0c\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x12\n\x0b\n\x04\x06\0\x02\
    \0\x12\x03\x07\x029\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x06\x0c\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\r\x1c\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\x07'7\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x08\x02F\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x08\x06\x1c\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x08\x1d*\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x085D\n\x0b\n\x04\
    \x06\0\x02\x02\x12\x03\t\x02A\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\
    \x06\x1b\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\t\x1c(\n\x0c\n\x05\x06\0\
    \x02\x02\x03\x12\x03\t3?\n\x0b\n\x04\x06\0\x02\x03\x12\x03\n\x02M\n\x0c\
    \n\x05\x06\0\x02\x03\x01\x12\x03\n\x06!\n\x0c\n\x05\x06\0\x02\x03\x02\
    \x12\x03\n\"4\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\n?K\n\x0b\n\x04\x06\
    \0\x02\x04\x12\x03\x0b\x029\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x0b\
    \x06\x0c\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x0b\r\x1c\n\x0c\n\x05\x06\
    \0\x02\x04\x03\x12\x03\x0b'7\n\t\n\x02\x04\0\x12\x03\x0e\0\x1a\n\n\n\x03\
    \x04\0\x01\x12\x03\x0e\x08\x17\n\t\n\x02\x04\x01\x12\x03\x10\0-\n\n\n\
    \x03\x04\x01\x01\x12\x03\x10\x08\x18\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x10\x1b+\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x10\x1b!\n\x0c\n\x05\x04\
    \x01\x02\0\x01\x12\x03\x10\"&\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x10)\
    *\n\n\n\x02\x04\x02\x12\x04\x12\0\x16\x01\n\n\n\x03\x04\x02\x01\x12\x03\
    \x12\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x12\n\x0c\n\x05\
    \x04\x02\x02\0\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\x13\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x10\x11\n\x0b\n\
    \x04\x04\x02\x02\x01\x12\x03\x14\x02$\n\x0c\n\x05\x04\x02\x02\x01\x06\
    \x12\x03\x14\x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x14\x16\x1f\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x14\"#\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03\x15\x02\x16\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x15\x02\
    \x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x15\t\x11\n\x0c\n\x05\x04\
    \x02\x02\x02\x03\x12\x03\x15\x14\x15\n\n\n\x02\x04\x03\x12\x04\x18\0\x1b\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x18\x08\x17\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x19\x02\x12\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x19\x02\x08\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x19\t\r\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x19\x10\x11\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1a\x02\x16\
    \n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03\x1a\t\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\
    \x1a\x14\x15\n\n\n\x02\x04\x04\x12\x04\x1d\0\x20\x01\n\n\n\x03\x04\x04\
    \x01\x12\x03\x1d\x08\x14\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1e\x02\x12\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1e\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03\x1e\t\r\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1e\x10\x11\
    \n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1f\x02\x16\n\x0c\n\x05\x04\x04\x02\
    \x01\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1f\
    \t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1f\x14\x15\n\n\n\x02\x04\
    \x05\x12\x04\"\0&\x01\n\n\n\x03\x04\x05\x01\x12\x03\"\x08\x14\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03#\x02\x12\n\x0c\n\x05\x04\x05\x02\0\x05\x12\
    \x03#\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\t\r\n\x0c\n\x05\x04\
    \x05\x02\0\x03\x12\x03#\x10\x11\n\x0b\n\x04\x04\x05\x02\x01\x12\x03$\x02\
    \x16\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\
    \x05\x02\x01\x01\x12\x03$\t\x11\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03$\
    \x14\x15\n\x0b\n\x04\x04\x05\x02\x02\x12\x03%\x02$\n\x0c\n\x05\x04\x05\
    \x02\x02\x06\x12\x03%\x02\x15\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03%\
    \x16\x1f\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03%\"#\n\t\n\x02\x04\x06\
    \x12\x03(\0/\n\n\n\x03\x04\x06\x01\x12\x03(\x08\x1a\n\x0b\n\x04\x04\x06\
    \x02\0\x12\x03(\x1d-\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03(\x1d#\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03($(\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03(\
    +,\n\t\n\x02\x04\x07\x12\x03*\0,\n\n\n\x03\x04\x07\x01\x12\x03*\x08\x17\
    \n\x0b\n\x04\x04\x07\x02\0\x12\x03*\x1a*\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03*\x1a\x20\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03*!%\n\x0c\n\x05\
    \x04\x07\x02\0\x03\x12\x03*()\n\t\n\x02\x04\x08\x12\x03,\0\x1b\n\n\n\x03\
    \x04\x08\x01\x12\x03,\x08\x18b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
